{
	"info": {
		"_postman_id": "768a481e-fcea-49fa-9704-b7aa753136e1",
		"name": "REST API IoT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Add user (missing username)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.username).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user (missing password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.password).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user (user added)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const newUsername = pm.environment.get(\"usernameAdmin\")\r",
									"    pm.expect(jsonData.username).to.equal(newUsername)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add user (username exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(409);\r",
									"    pm.expect(jsonData.status).to.equal(\"Conflict\");\r",
									"    pm.expect(jsonData.message).to.equal(\"A user with that username already exists.\")\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user (missing username)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.username).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user (missing password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.password).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user (user logged in)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const newUsername = pm.environment.get(\"usernameAdmin\")\r",
									"    pm.expect(jsonData.user.username).to.equal(newUsername)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"\r",
									"    jsonData = jsonData.user;\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"user_token\", jsonData.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user (user not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(404);\r",
									"    pm.expect(jsonData.status).to.equal(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.equal(\"A user with that username not found.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "da_ni89",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user (invalid credentials)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(401);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unauthorized\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Invalid credentials.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "da_ni89",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Device",
			"item": [
				{
					"name": "Registration (missing username)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.username).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"serial_number\": \"{{serial_number}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration (missing password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.password).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"serial_number\": \"{{serial_number}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration (missing serial number)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.json.serial_number[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json.serial_number).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.json.serial_number[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration (device registred)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.device.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.device.status).to.equal(\"CREATED\");\r",
									"    const newUsername = pm.environment.get(\"username\")\r",
									"    pm.expect(jsonData.device.username).to.equal(newUsername)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"    pm.expect(jsonData).to.have.property(\"device\");\r",
									"\r",
									"    jsonData = jsonData.device;\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"device_token\", jsonData.access_token);\r",
									"pm.environment.set(\"device_id\", jsonData.device.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"serial_number\": \"{{serial_number}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration (existing serial number)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409 Conflict\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(409);\r",
									"    pm.expect(jsonData.status).to.equal(\"Conflict\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Registration could not be completed due to a conflict. Serial number already exist.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"serial_number\": \"{{serial_number}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (change status to DELETED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.status).to.equal(\"DELETED\")\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"username\"))\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/delete/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"delete",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (deleted device)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(403);\r",
									"    pm.expect(jsonData.status).to.equal(\"Forbidden\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Device is already deleted.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/delete/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"delete",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (status DELETED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(401);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unauthorized\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The device cannot be logged in because the account has been deleted. Please register again.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration (status was DELETED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.device.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.device.status).to.equal(\"CREATED\");\r",
									"    pm.expect(jsonData.device.username).to.equal(pm.environment.get(\"username\"));\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"    pm.expect(jsonData).to.have.property(\"device\");\r",
									"\r",
									"    jsonData = jsonData.device;\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"device_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"serial_number\": \"{{serial_number}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status (missing token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"authorization_required\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Request does not contain an access token.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status (invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"invalid_token\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Signature verification failed.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDc3Mjk4NSwianRpIjoiZTc0N2E2MmQtNDAzNy00ZTA5LWE5ODYtN2E2MzcyNWI1NDE2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6NiwibmJmIjoxNzEwNzcyOTg1LCJjc2JmIjoiZDVjNWEyMzUtOTYzNi00YjcwLWFlOTUtMTkyZDBkNWFmYjNkIiwiZXhwIjoxNzQyMzA4OTg1fQ.pv8dZN6qB734yQt53zchCLoTqS_nkJwJ_rY3bBquo28",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status (expired token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_expired\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has expired.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status (device not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(404);\r",
									"    pm.expect(jsonData.status).to.equal(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Device not found.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status (CREATED, DELETED device)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.status).to.equal(\"CREATED\");\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"username\"))\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (missing token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"authorization_required\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Request does not contain an access token.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\", \"status\": \"APPROVED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"invalid_token\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Signature verification failed.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDc3Mjk4NSwianRpIjoiZTc0N2E2MmQtNDAzNy00ZTA5LWE5ODYtN2E2MzcyNWI1NDE2IiwidHlwZSI6ImFjY2VzcyIsInN1YiI6NiwibmJmIjoxNzEwNzcyOTg1LCJjc2JmIjoiZDVjNWEyMzUtOTYzNi00YjcwLWFlOTUtMTkyZDBkNWFmYjNkIiwiZXhwIjoxNzQyMzA4OTg1fQ.pv8dZN6qB734yQt53zchCLoTqS_nkJwJ_rY3bBquo28",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\", \"status\": \"APPROVED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (expired token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_expired\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has expired.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\", \"status\": \"APPROVED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (missing device_id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.json.device_id[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json.device_id).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.json.device_id[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"status\": \"APPROVED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (missing status)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.json.status[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json.status).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.json.status[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (invalid device ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(404);\r",
									"    pm.expect(jsonData.status).to.equal(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Device not found or invalid ID provided.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"785123\", \"status\": \"APPROVED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (invalid status)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(400);\r",
									"    pm.expect(jsonData.status).to.equal(\"Bad Request\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Invalid device status provided.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\", \"status\": \"BLOCK\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (status CREATED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json().device;\r",
									"    pm.expect(jsonData.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.status).to.equal(\"CREATED\")\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"username\"))\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"    pm.expect(jsonData).to.have.property(\"device\");\r",
									"\r",
									"    jsonData = jsonData.device;\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"device_token\", jsonData.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data ( !=APPROVED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(403);\r",
									"    pm.expect(jsonData.status).to.equal(\"Forbidden\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Access to the requested resource is forbidden.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"value\":\"13\", \"unit\":\"Celsius\",\"name\": \"Temperature\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (user not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(404);\r",
									"    pm.expect(jsonData.status).to.equal(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.equal(\"User not found.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\", \"status\": \"APPROVED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (changed status)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"username\"));\r",
									"    pm.expect(jsonData.status).to.equal(\"APPROVED\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\", \"status\": \"APPROVED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status (APPROVED device)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.device.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.device.status).to.equal(\"APPROVED\");\r",
									"    pm.expect(jsonData.device.username).to.equal(pm.environment.get(\"username\"))\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"    pm.expect(jsonData).to.have.property(\"device\");\r",
									"\r",
									"    jsonData = jsonData.device;\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (missing username)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.username).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (missing password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.password).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (invalid ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(404);\r",
									"    pm.expect(jsonData.status).to.equal(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Device not found or invalid ID provided.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/89782",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"89782"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (invalid username)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(401);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unauthorized\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Invalid credentials.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "dunJa",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (invalid password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(401);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unauthorized\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Invalid credentials.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "542",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (status APPROVED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.device.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.device.status).to.equal(\"APPROVED\");\r",
									"    pm.expect(jsonData.device.username).to.equal(pm.environment.get(\"username\"))\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"    pm.expect(jsonData).to.have.property(\"device\");\r",
									"\r",
									"    jsonData = jsonData.device;\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"device_token\", jsonData.access_token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data (missing token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"authorization_required\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Request does not contain an access token.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"value\":\"11\", \"unit\":\"Celsius\",\"name\": \"Temperature\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data (invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"invalid_token\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Signature verification failed.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVjaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"value\":\"11\", \"unit\":\"Celsius\",\"name\": \"Temperature\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data (expired token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_expired\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has expired.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"value\":\"10\", \"unit\":\"Celsius\",\"name\": \"Temperature\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data (missing name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.json.name[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json.name).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.json.name[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"value\":\"11\", \"unit\":\"Celisus\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data (missing unit)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.json.unit[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json.unit).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.json.unit[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"value\":\"11\", \"name\":\"Temperature\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data (missing value)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.json.value[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.json.value).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.json.value[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Temperature\", \"unit\":\"Celisus\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data (data added)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.equal(\"New data added successfully.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"value\":\"13\", \"unit\":\"Celsius\",\"name\": \"Temperature\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update (changed status)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.serial_number).to.equal(pm.environment.get(\"serial_number\"));\r",
									"    pm.expect(jsonData.username).to.equal(pm.environment.get(\"username\"));\r",
									"    pm.expect(jsonData.status).to.equal(\"BLACKLISTED\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"serial_number\");\r",
									"    pm.expect(jsonData.serial_number).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\", \"status\": \"BLACKLISTED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (missing username)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.username).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.username[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/delete/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"delete",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (missing password)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422 Unprocessable Entity\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(422);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unprocessable Entity\")\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.equal(\"Missing data for required field.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.errors).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers).to.be.an(\"object\");\r",
									"    pm.expect(jsonData.errors.headers.password).to.be.an(\"array\");\r",
									"    pm.expect(jsonData.errors.headers.password[0]).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/delete/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"delete",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (invalid ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(404);\r",
									"    pm.expect(jsonData.status).to.equal(\"Not Found\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Device not found or invalid ID provided.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/delete/8985",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"delete",
								"8985"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete (invalid credentials)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(401);\r",
									"    pm.expect(jsonData.status).to.equal(\"Unauthorized\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Invalid credentials.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "4528",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/delete/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"delete",
								"{{device_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logout user",
			"item": [
				{
					"name": "Logout (missing token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"authorization_required\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Request does not contain an access token.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout (invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"invalid_token\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Signature verification failed.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVjaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout (expired token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_expired\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has expired.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout (successfully logout)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.equal(\"The user was successfully logged out.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/user/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "All device (revoked user token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_revoked\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has been revoked.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user (user logged in)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    const newUsername = pm.environment.get(\"usernameAdmin\")\r",
									"    pm.expect(jsonData.user.username).to.equal(newUsername)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"\r",
									"    jsonData = jsonData.user;\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"user_token\", jsonData.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{usernameAdmin}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{passwordAdmin}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Devices List",
			"item": [
				{
					"name": "All device (missing token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"authorization_required\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Request does not contain an access token.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device requests (missing token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"authorization_required\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Request does not contain an access token.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/requests",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "All device (invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"invalid_token\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Signature verification failed.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVjaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device requests (invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"invalid_token\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Signature verification failed.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVjaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/requests",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "All device (expired token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_expired\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has expired.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device requests (expired token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_expired\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has expired.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/requests",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "All device (user not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(403);\r",
									"    pm.expect(jsonData.status).to.equal(\"Forbidden\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Access to the requested resource is forbidden.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "All device (get devices)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/all",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device requests (user not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(403);\r",
									"    pm.expect(jsonData.status).to.equal(\"Forbidden\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Access to the requested resource is forbidden.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/requests",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"requests"
							]
						}
					},
					"response": []
				},
				{
					"name": "Device requests (get devices)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/devices/requests",
							"host": [
								"{{url}}"
							],
							"path": [
								"devices",
								"requests"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Change to BLACKLISTED",
			"item": [
				{
					"name": "Delete (blacklisted device)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(403);\r",
									"    pm.expect(jsonData.status).to.equal(\"Forbidden\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Access to the requested resource is forbidden.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/delete/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"delete",
								"{{device_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status (BLACKLISTED device)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(403);\r",
									"    pm.expect(jsonData.status).to.equal(\"Forbidden\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Access to the requested resource is forbidden.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status (revoked device token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_revoked\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has been revoked.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insert data (revoked device token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_revoked\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has been revoked.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{device_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"value\":\"13\", \"unit\":\"Celsius\",\"name\": \"Temperature\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/data",
							"host": [
								"{{url}}"
							],
							"path": [
								"data"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login (status BLACKLISTED)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(403);\r",
									"    pm.expect(jsonData.status).to.equal(\"Forbidden\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Access to the requested resource is forbidden.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "{{username}}",
								"type": "text"
							},
							{
								"key": "password",
								"value": "{{password}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/auth/login/{{device_id}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login",
								"{{device_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Change status to repeat tests",
			"item": [
				{
					"name": "Change status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"device_id\":\"{{device_id}}\", \"status\": \"CREATED\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/update",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete user",
			"item": [
				{
					"name": "Delete user (missing token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"authorization_required\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Request does not contain an access token.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/user/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user (invalid token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"invalid_token\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Signature verification failed.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVjaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/user/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user (expired token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error).to.equal(\"token_expired\");\r",
									"    pm.expect(jsonData.message).to.equal(\"The token has expired.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcxMDQxMjQyMSwianRpIjoiM2NhNTFkNDUtZTE3Yi00NGU0LWIxNjAtMDEyZWNlOWI4ZWViIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6MiwibmJmIjoxNzEwNDEyNDIxLCJjc3JmIjoiNzQ4NmQ3MzYtY2QyYS00NzQ2LWI0ODUtNmIwNGJkM2JhYjczIiwiZXhwIjoxNzEwNDEzMzIxfQ.h65REzJPFskmx9vDLBvDho2EyUo1pzXp7nRObAwk3jY",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/user/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user (successfully deleted)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.equal(\"The user was successfully deleted.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/user/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user (user not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403 Forbidden\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body contains expected fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.code).to.equal(403);\r",
									"    pm.expect(jsonData.status).to.equal(\"Forbidden\");\r",
									"    pm.expect(jsonData.message).to.equal(\"Access to the requested resource is forbidden.\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"code\");\r",
									"    pm.expect(jsonData.code).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"message\");\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData).to.have.property(\"status\");\r",
									"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/user/delete",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Shutdown",
			"item": [
				{
					"name": "Add user (user added)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "username",
								"value": "admin",
								"type": "text"
							},
							{
								"key": "password",
								"value": "admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login user (user logged in)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body fields are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"access_token\");\r",
									"    pm.expect(jsonData).to.have.property(\"user\");\r",
									"\r",
									"    jsonData = jsonData.user;\r",
									"\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"user_token\", jsonData.access_token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "username",
								"value": "admin",
								"type": "text"
							},
							{
								"key": "password",
								"value": "admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{url}}/user/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "shutdown",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/shutdown",
							"host": [
								"{{url}}"
							],
							"path": [
								"shutdown"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}